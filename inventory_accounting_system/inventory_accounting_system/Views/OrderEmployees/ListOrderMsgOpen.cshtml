@model IEnumerable<inventory_accounting_system.Models.OrderEmployee>

    <div class="row wrapper border-bottom white-bg page-heading">
        <div class="col-lg-10">
            <h2>Заявки от @ViewBag.UserNameOrderF</h2>
            <ol class="breadcrumb">
                <li>
                    <a href="~/OrderEmployees">Заявки</a>
                </li>
                <li class="active">
                    <strong>Заявки от @ViewBag.UserNameOrderF</strong>
                </li>
            </ol>
        </div>
        <div class="col-lg-2">
        </div>
    </div>
    <hr />

<div class="wrapper wrapper-content">
        <div class="row">
            <div class="col-lg-3">
                <div class="ibox float-e-margins">
                    <div class="ibox-content mailbox-content">
                        <div class="file-manager">
                            
                            <div class="space-25"></div>
                            <h5>Почта</h5>
                                <ul class="folder-list m-b-md" style="padding: 0">

                                    <li><a asp-controller="OrderEmployees" asp-action="Index"> <i class="fa fa-inbox ">
                                    
                                    </i> Заявки <span class="label label-warning pull-right"> Не прочитанны: @await Component.InvokeAsync("OrderEmployeeVM")</span> </a></li>

                                </ul>
                         
                          
                        <div class="clearfix"></div>
                         
                    </div>
                </div>
            </div>
        </div>

        

        <div class="col-lg-9 animated fadeInRight">
            <div class="mail-box-header">

                <form method="get" action="index.html" class="pull-right mail-search">
                    <div class="input-group">
                        <input type="text" class="form-control input-sm" name="search" placeholder="Search email">
                        <div class="input-group-btn">
                            <button type="submit" class="btn btn-sm btn-primary">
                                Search
                            </button>
                        </div>
                    </div>
                </form>
                <h2>
                    Непрочитанные ( @await Component.InvokeAsync("OrderEmployeeVMOpen"))
                </h2>
                <div class="mail-tools tooltip-demo m-t-md">
                    <div class="btn-group pull-right">
                        <button class="btn btn-white btn-sm"><i class="fa fa-arrow-left"></i></button>
                        <button class="btn btn-white btn-sm"><i class="fa fa-arrow-right"></i></button>

                    </div>
                    <button class="btn btn-white btn-sm" data-toggle="tooltip" data-placement="left" title="Refresh inbox"><i class="fa fa-refresh"></i> Обновить</button>
                    <button class="btn btn-white btn-sm" data-toggle="tooltip" data-placement="top" title="Mark as read"><i class="fa fa-eye"></i> </button>
                    <button class="btn btn-white btn-sm" data-toggle="tooltip" data-placement="top" title="Mark as important"><i class="fa fa-exclamation"></i> </button>
                    <button class="btn btn-white btn-sm" data-toggle="tooltip" data-placement="top" title="Move to trash"><i class="fa fa-trash-o"></i> </button>

                </div>
            </div>
                <div class="mail-box">

@foreach (var item in Model)
{
    if (item.Status == "Open")
    {
                <table class="table table-hover table-mail">
                <tbody>
                <tr class="unread">
                    <td class="check-mail">
                        <input type="checkbox" id="inprogresCheck"class="i-checks" value="@item.Id" onchange="OnChangeCheckBoxFuncOrderOpen(this)">
                    </td>
                    <td class="mail-ontact">

                    @if (@item.EmployeeFromId == null)
                        {
                            <a asp-controller="OrderEmployees" 
                        asp-action="Details" 
                        asp-route-id="@item.Id"
                        data-id="@item.Id" onclick="GetMessageId(this)">Отправитель неизвестен</a>
                        }else{
                        
                            <a asp-controller="OrderEmployees" 
                        asp-action="Details" 
                        asp-route-id="@item.Id"
                        data-id="@item.Id" onclick="GetMessageId(this)">@Html.DisplayFor(modelItem => item.EmployeeFrom.Name)</a>
                        }

                        
                        <span class="label label-success pull-right" id="statusMsg">Open</span></td>
                    <td class="mail-subject"><div style="float: right;"><img style="width: 50px; height: 40px;" class="img-container" src="../@item.Asset.ImagePath" /></div>
                        <a asp-controller="OrderEmployees" 
                    asp-action="Details" 
                    asp-route-id="@item.Id"
                    data-id="@item.Id" id="getUpdate" onclick="GetMessageId(this)">@Html.DisplayFor(modelItem => item.Asset.Name)</a></td>
                    <td class="">
                        
                    </td>
                    <td class="text-right mail-date">@Html.DisplayFor(modelItem => item.DateFrom)</td>
                </tr>
                </tbody>
                </table>
    }
}

 </div>
            </div>
</div>
</div>

<script>

        checkedCheckBoxOrder = [];

        function OnChangeCheckBoxFuncOrderNew(e) {
            var orderId = e.value;
            
            if (checkedCheckBoxOrder.indexOf(orderId) > -1) {
                var elementIndex = checkedCheckBoxOrder.indexOf(orderId);
                checkedCheckBoxOrder.splice(elementIndex, 1);
            } else {
                checkedCheckBoxOrder.push(orderId);
            }
        }

        function OnChangeCheckBoxFuncOrderOpen(e) {
            var orderId = e.value;
            
            if (checkedCheckBoxOrder.indexOf(orderId) > -1) {
                var elementIndex = checkedCheckBoxOrder.indexOf(orderId);
                checkedCheckBoxOrder.splice(elementIndex, 1);
            } else {
                checkedCheckBoxOrder.push(orderId);
            }
        }

        function GetOrderEmployeeAdmin() {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("OrderSendAdmin", "OrderEmployeeAdmins")',
                    data: {
                        idMessageOpen: idMessageOpen,
                        messageOnIdOpenUser: messageOnIdOpenUser,
                        officeIdAdmin: officeIdAdmin,
                        employeeFromIdAdmin: employeeFromIdAdmin,
                        employeeToIdAdmin: employeeToIdAdmin,
                        titleAdmin: $("#titleContentAdmin").val(),
                        contentAdmin: $("#contentOrderIAdmin").val()
                    },
                    success: function (data) {
                        console.log('success!');
                    }
                });
            }
        
</script>
        
